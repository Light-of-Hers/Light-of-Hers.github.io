[{"title":"C++格式化字符串的一个极简实现","url":"/2020/01/07/blog/","content":"写C++程序设计的大作业时，不方便引用外部的库，想传递一些格式化字符串写起来就很麻烦。一般来说使用sprintf或者std::ostringstream，但前者一般只支持C原生类型，而后者通常的写法略显繁琐（前者也比较繁琐）。于是便想到了下面的写法：\n#define format(__stream)\\    (dynamic_cast&lt;std::ostringstream &amp; &gt;(std::ostringstream() __stream).str())\n\n举个例子：\nnamespace crz &#123;class bad_comparison : public std::logic_error &#123;public:    explicit bad_comparison(        const std::type_info &amp;from,         const std::type_info &amp;to,         const char *opt) :     std::logic_error(format(&lt;&lt; from.name() &lt;&lt; &quot; &quot; &lt;&lt; opt &lt;&lt; &quot; &quot; &lt;&lt; to.name())) &#123;&#125;&#125;;&#125;\n\n还可以用变参模板实现：\nnamespace crz &#123;namespace detail &#123;template&lt;typename ...Args, typename = typename std::enable_if&lt;sizeof...(Args) == 0&gt;::type&gt;inline std::ostream &amp;__va_output(std::ostream &amp;os, Args &amp;&amp;...args) &#123;    return os;&#125;template&lt;typename T, typename ...Args&gt;inline std::ostream &amp;__va_output(std::ostream &amp;os, T &amp;&amp;t, Args &amp;&amp;...args) &#123;    os &lt;&lt; t;    return __va_output(os, std::forward&lt;Args&gt;(args)...);&#125;&#125;template&lt;typename ...Args&gt;inline std::string format(Args &amp;&amp;...args) &#123;    std::ostringstream os;    detail::__va_output(os, std::forward&lt;Args&gt;(args)...);    return os.str();&#125;&#125;\n\n举个例子：\nnamespace crz &#123;class bad_comparison : public std::logic_error &#123;public:    explicit bad_comparison(        const std::type_info &amp;from,         const std::type_info &amp;to,         const char *opt) :     std::logic_error(format(from.name(), &quot; &quot;, opt, &quot; &quot;, to.name())) &#123;&#125;&#125;;&#125;\n\n不过变参模板的实现显然没有之前用宏实现来得简洁。\n以上只是个人一时的脑洞，较大的项目还是用fmt等成熟的格式化库为好（或者等有生之年C++20的format落地后用标准库）。\n","categories":["Programming"],"tags":["Cpp"]},{"title":"Hello World","url":"/2024/09/13/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick StartCreate a new post$ hexo new \"My New Post\"\n\nMore info: Writing\nRun server$ hexo server\n\nMore info: Server\nGenerate static files$ hexo generate\n\nMore info: Generating\nDeploy to remote sites$ hexo deploy\n\nMore info: Deployment\nfor i in range(10):    print(\"hello world\") \n\n\n"}]